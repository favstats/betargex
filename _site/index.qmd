---
description-meta: "How do political parties chase your vote, what do they want to keep hidden, and how much money do they spend on it? In the lead-up to the elections, we monitor political microtargeting."
lang: nl
format: 
  html:
    page-layout: full
---

```{r setup, include=FALSE}
library(highcharter)
library(jsonlite)


sets <- jsonlite::fromJSON("../settings.json")

## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)


pacman::p_load(htmltools, tidyverse, highcharter, gt, gtExtras)

options(scipen = 999)
# print(getwd())
# here::here("")
# prCint(getwd())
hcoptslang <- getOption("highcharter.lang")
# 
hcoptslang$shortMonths <- c("Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec")
# 
options(highcharter.lang = hcoptslang)


source("../utils.R")
source("../party_utils.R")


## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)
```



::: {.panel-tabset}

## Partijen

```{r}

thedata <- election_dat30 %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(party) %>% 
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
  ungroup()

highchart() %>%
  hc_chart(type = "venn") %>%
  hc_add_series(
    dataLabels = list(style = list(fontSize = "20px")),
    name = "Venn Diagram",
    data = lapply(1:nrow(thedata), function(i) {
      list(
        name = thedata$party[i],
        sets = list(thedata$party[i]),
        value = thedata$total_spend_formatted[i]
      )
    })
  ) %>%
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = "<b>{point.name}:</b> {point.value}"
  )  %>%
  hc_annotations(list(
    labels = lapply(1:nrow(thedata), function(i) {
      list(
        point = list(
          x = thedata$party[i],
          y = thedata$total_spend_formatted[i]
        ),
        text = paste0(thedata$party[i], ": $", format(thedata$total_spend_formatted[i], big.mark = ","))
      )
    })
  )) 


```


```{r, eval = F}

data <- election_dat30 %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(party) %>% 
  arrange(desc(total_spend_formatted)) %>% 
  slice(1:5) %>% 
  ungroup() 

hc <- hchart(data, "packedbubble", hcaes(name = page_name, value = total_spend_formatted, group = party))


hc %>% 
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = "<b>{point.name}:</b> {point.value}"
  ) %>% 
  hc_plotOptions(
    packedbubble = list(
      maxSize = "200%",
      zMin = 0,
      layoutAlgorithm = list(
        gravitationalConstant = 0.1, # Increase to make it more stable
        splitSeries = TRUE, # TRUE to group points by series
        seriesInteraction = TRUE,
        dragBetweenSeries = TRUE,
        parentNodeLimit = TRUE,
        initialPositions = "circle" # Default is random, can try 'circle'
      ),
      dataLabels = list(
        enabled = TRUE,
        format = "{point.name}",
        style = list(
          color = "black",
          textOutline = "none",
          fontWeight = "normal"
        )
      )
    )
  )


```


## Map

```{r}
# Prepare demo data
data <- data.frame(
  code  = c('be-3530', 'be-3534', 'be-3528', 'be-3529', 'be-3532', 'be-489', 'be-3535', 'be-490', 'be-3526', 'be-3527', 'be-3533'),
  value = c(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
)

# Create the map chart
hcmap(
  "countries/be/be-all", 
  data = data, 
  name = "Random data",
  value = "value",
  joinBy = c("hc-key", "code"),
  dataLabels = list(enabled = TRUE, format = '{point.name}'),
  states = list(hover = list(color = '#BADA55')),
  chart = list(
    events = list(
      render = JS("
        function() {
          console.log('Render event triggered');
          var chart = this;
          var container = chart.renderTo;
          if (container) {
            var containerWidth = container.clientWidth;
            var aspectRatio = 3 / 4; // Set a default aspect ratio
            var calculatedHeight = containerWidth * aspectRatio;
            console.log('Calculated Height:', calculatedHeight);
            chart.update({
              chart: {
                height: calculatedHeight
              }
            });
          } else {
            console.log('Container not found');
          }
        }
      ")
    )
  ),
  events = list(click = JS("function(event) { 
                             var region = event.point.name;
                             document.querySelectorAll('.region-content').forEach(function(el) {
                               el.style.display = 'none';
                             });
                             document.getElementById(region).style.display = 'block';
                           }"))
) %>% 
  hc_title(text = "Highcharts Maps basic demo") %>% 
  hc_size(height = 600)

```


<div id="content">
  <div id="Antwerp" class="region-content" style="display:none;">


```{r}
library(reactable)

reactable(iris)
```



  </div>
  <div id="Limburg" class="region-content" style="display:none;">
    <h2>Limburg</h2>
    <p>show me</p>
  </div>
  <div id="East Flanders" class="region-content" style="display:none;">
    <h2>East Flanders</h2>
    <p>yowhat</p>
  </div>
</div>


::: 

<script>
document.addEventListener('DOMContentLoaded', function () {
  console.log('DOM fully loaded and parsed');
  document.querySelectorAll('.region-content').forEach(function(el) {
    el.style.display = 'none';
  });


});
</script>
<style>
body, html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

#map-container {
  width: 100%;
  height: 600px;
  border: 2px solid red;
}

.highcharts-container {
  width: 100% !important;
  height: 100% !important;
}

.highcharts-root {
  width: 100% !important;
  height: 100% !important;
}
</style>