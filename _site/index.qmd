---
description-meta: "How do political parties chase your vote, what do they want to keep hidden, and how much money do they spend on it? In the lead-up to the elections, we monitor political microtargeting."
lang: nl
format: 
  html:
    page-layout: full
---

```{r setup, include=FALSE}
library(highcharter)
library(jsonlite)
library(reactable)


sets <- jsonlite::fromJSON("../settings.json")

## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)


pacman::p_load(htmltools, tidyverse, highcharter, gt, gtExtras)

options(scipen = 999)
# print(getwd())
# here::here("")
# prCint(getwd())
hcoptslang <- getOption("highcharter.lang")
# 
hcoptslang$shortMonths <- c("Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec")
# 
options(highcharter.lang = hcoptslang)


source("../utils.R")
source("../party_utils.R")


## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)
```

### Choose a partij



```{r}

lts <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vR0B2SBiIU4UX0XNMGPHY1OLNpoZqxR6_dlF_kxJ0C7KpOKuXcIVgcf6oy8ljxLghXaAX6pPLXCgO-o/pub?output=csv") %>% 
  janitor::clean_names() %>% 
  rename(page_name = candidate)

# lts


# election_dat30 %>% 
#   distinct(page_name, internal_id) %>% 
  # right_join(lts, by = "page_name") %>% 
  # mutate(ad_library_page = ifelse(is.na(internal_id), NA, glue::glue(
  #   "https://www.facebook.com/ads/library/?active_status=all&ad_type=political_and_issue_ads&country=BE&view_all_page_id={internal_id}&sort_data[direction]=desc&sort_data[mode]=relevancy_monthly_grouped&search_type=page&media_type=all"
  # ))) %>% 
  # arrange(party, region) %>% 
  # select(-internal_id, -facebook_id) %>% 
  # openxlsx::write.xlsx("candidates.xlsx")

```


```{r}

thedata <- election_dat30 %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(party) %>% 
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>% 
  ungroup() %>% 
  left_join(color_dat) %>% 
  arrange(desc(total_spend_formatted))



highchart() %>%
  hc_chart(type = "venn")  %>%
  hc_add_series(
    dataLabels = list(
      style = list(
        fontSize = "20px"
      ),
      formatter = JS("function() { return '<span style=\"color:' + this.point.color + '\">' + this.point.name + '</span>'; }")
    ),
    name = "Total Spending in €",
    data = lapply(1:nrow(thedata), function(i) {
      list(
        name = thedata$party[i],
        sets = list(thedata$party[i]),
        value = thedata$total_spend_formatted[i],
        color = thedata$colors[i]
      )
    })
  ) %>%
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = "<b>{point.name}:</b> {point.value}"
  )  %>%
  hc_plotOptions(
    series = list(
      events = list(
        click = JS("function(event) { 
                     var party = event.point.name;
                     console.log('Party clicked:', party);
                     document.querySelectorAll('.party-content').forEach(function(el) {
                       el.style.display = 'none';
                     });
                     var partyElement = document.getElementById(party);
                     if (partyElement) {
                       partyElement.style.display = 'block';
                     } else {
                       console.error('Party element with ID ' + party + ' not found');
                     }
                   }")
      )
    )
  )




```


```{r, eval = F}

data <- election_dat30 %>% 
  distinct(internal_id, .keep_all = T) %>% 
  group_by(party) %>% 
  arrange(desc(total_spend_formatted)) %>% 
  slice(1:5) %>% 
  ungroup() 

hc <- hchart(data, "packedbubble", hcaes(name = page_name, value = total_spend_formatted, group = party))


hc %>% 
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = "<b>{point.name}:</b> {point.value}"
  ) %>% 
  hc_plotOptions(
    packedbubble = list(
      maxSize = "200%",
      zMin = 0,
      layoutAlgorithm = list(
        gravitationalConstant = 0.1, # Increase to make it more stable
        splitSeries = TRUE, # TRUE to group points by series
        seriesInteraction = TRUE,
        dragBetweenSeries = TRUE,
        parentNodeLimit = TRUE,
        initialPositions = "circle" # Default is random, can try 'circle'
      ),
      dataLabels = list(
        enabled = TRUE,
        format = "{point.name}",
        style = list(
          color = "black",
          textOutline = "none",
          fontWeight = "normal"
        )
      )
    )
  )


```










<div id="content">

<div id="Groen" class="party-content" style="display:none;">
```{r}
library(reactable)

reactable(iris)
```
</div>


<div id="N-VA" class="party-content" style="display:none;">
```{r}
# Render a bar chart with a label on the left
bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
  bar <- div(style = list(background = fill, width = width, height = height))
  chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = background), bar)
  div(style = list(display = "flex", alignItems = "center"), label, chart)
}

# 
# reactable(iris)
election_type_colors <- c(
  "federal_election" = "#FFDDC1",
  "Flemish_election" = "#C1E1C1",
  "Brussels_Gewest" = "#C1E3E1",
  "EU" = "#C1D4E1"
)

election_types <- c("federal_election", 
                    "Flemish_election", 
                    "Brussels_Gewest",
                    "EU")
# election_type_colors <- rgb(colorRampPalette(c("#ffe4cc", "#ff9f1a"))(length(election_types)), maxColorValue = 255)
names(election_type_colors) <- election_types



byparty30 <- election_dat30 %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total_spend_formatted)) %>%
  ungroup() %>%
  select(party, total_spenderino)

col_each30 <- readRDS("col_each30.rds")


interest_targeting30 <-  election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(type == "detailed") %>%
    # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
    # mutate(total_spend = ifelse(total_spend == 100, 50, total_spend)) %>%
    mutate(target_spend = total_spend * total_spend_pct) %>%
    filter(main_currency == the_currency)  %>%
    # left_join(page_names %>% select(internal_id = page_id, page_name) %>% distinct(internal_id, .keep_all =T)) %>%
    # left_join(us_advertisers %>% rename(internal_id = page_id)) %>%
    # drop_na(left_vs_right) %>%
    mutate(value = paste0(detailed_type,": ", value)) %>%
    # group_by(page_name, value, is_exclusion, detailed_type) %>%
    # summarise(total_spend = sum(total_spend)) %>%
    # ungroup() %>%
    arrange(desc(total_spend))  %>%
  filter(!is_exclusion) %>%
  # filter(total_spend >= 40000) %>%
  filter(total_spend >= 1) %>%
  # add_count(value) %>%
  # filter(n >= 5) %>%
  # left_join(byparty30) %>%
  # group_by(party) %>%
  # mutate(total_spenderino = sum(total_spend)) %>%
  mutate(perc = target_spend/total_spend)# %>%
  # mutate(value = str_remove_all(value, "INTERESTS: |DEMOGRAPHICS: |BEHAVIORS: ")) 


findat <- interest_targeting30 %>% 
  mutate(perc_ads = num_ads / total_num_ads,
         perc = target_spend/total_spend_formatted) %>% 
  select(internal_id, target = value, ads_per = num_ads, spend_per = target_spend, party, perc, perc_ads) %>%
  bind_rows(col_each30%>% 
  mutate(perc = perc/100,
         perc_ads = perc_ads/100)) %>% 
  filter(perc != 0)




yes <-  election_dat30 %>%
  select(-type) %>% 
  left_join(lts %>% select(-party)) %>%
  mutate(type = str_remove_all(type, "Lijsttrekkers_")) %>% 
  filter(party == "N-VA") %>%
  filter(main_currency == the_currency) %>%
  distinct(internal_id, .keep_all = TRUE) %>%
  arrange(desc(total_spend_formatted)) %>%
  # mutate(total_spend_formatted = scales::comma(total_spend_formatted)) %>%
  select(page_name, total_num_ads, total_spend_formatted, type, internal_id) %>%
  set_names(c("Page", "Ads", "Spent (€)", "Race", "internal_id")) 

# Assuming `election_dat30` and `lts` are your data frames
styled_reactable <- yes %>% 
  select(-internal_id) %>% 
  reactable(
    fullWidth = T,
    pagination = T,
    defaultSorted = "Spent (€)",
    defaultColDef = colDef(headerClass = "header", align = "left"),
    columns = list(
      Page = colDef(
        cell = function(value) {
          url <- paste0("https://facebook.com/", value)
          tags$a(href = url, target = "_blank", value)
        }
      ),
      `Ads` = colDef(
        defaultSortOrder = "desc",
        cell = function(value) {
          max_value <- max(yes$`Ads`, na.rm = TRUE)
          width <- paste0(value * 100 / max_value, "%")
          value <- format(value, big.mark = ",")
          bar <- div(
            class = "bar-chart",
            style = list(marginRight = "0.375rem"),
            div(class = "bar", style = list(width = width, backgroundColor = "#3fc1c9"))
          )
          div(class = "bar-cell", span(class = "number", value), bar)
        }
      ),
      `Spent (€)` = colDef(
        name = "Spent (€)",
        defaultSortOrder = "desc",
        cell = function(value) {
          # Assuming total_spend_formatted is numeric for the bar calculation
          
          numeric_value <- as.numeric(gsub(",", "", value))
          max_value <- max(as.numeric(gsub(",", "", yes$`Spent (€)`)), na.rm = TRUE)
          width <- paste0(numeric_value * 100 / max_value, "%")
          bar <- div(
            class = "bar-chart",
            style = list(marginRight = "0.375rem"),
            div(class = "bar", style = list(width = width, backgroundColor = "#3fc1c9"))
          )
          div(class = "bar-cell", span(class = "number", value), bar)
        }
      ),
      Type = colDef(
        cell = function(value) {
          # div(class = "type-cell", value)
          color <- election_type_colors[value]
          div(style = list(backgroundColor = color, padding = "0.2rem 0.5rem"), value)
        }
      )
    ),
    # compact = TRUE,
    class = "styled-table",
    meta = list(showColors = TRUE, electionTypeColors = election_type_colors),
    details = function(index) {
  plant_data <- findat[findat$internal_id == yes$internal_id[index], ]
  htmltools::div(style = "padding: 1rem",
    reactable(
      plant_data %>% select(target, ads_per, spend_per, perc, perc_ads),
      outlined = TRUE,
      pagination = T,
    fullWidth = T,
      defaultColDef = colDef(headerClass = "header", align = "left"),
    defaultSorted = "perc",
      columns = list(
        target = colDef(header = "Target"),
        ads_per = colDef(
          header = "Ads Per",
          cell = function(value) {
            max_value <- max(plant_data$ads_per, na.rm = TRUE)
            width <- paste0(value * 100 / max_value, "%")
            value <- format(value, big.mark = ",")
            bar <- div(
              class = "bar-chart",
              style = list(marginRight = "0.375rem"),
              div(class = "bar", style = list(width = width, backgroundColor = "#3fc1c9"))
            )
            div(class = "bar-cell", span(class = "number", value), bar)
          }
        ),
        spend_per = colDef(
          header = "Spend Per (€)",
          cell = function(value) {
            numeric_value <- as.numeric(gsub(",", "", value))
            max_value <- max(as.numeric(gsub(",", "", plant_data$spend_per)), na.rm = TRUE)
            width <- paste0(numeric_value * 100 / max_value, "%")
            bar <- div(
              class = "bar-chart",
              style = list(marginRight = "0.375rem"),
              div(class = "bar", style = list(width = width, backgroundColor = "#3fc1c9"))
            )
            div(class = "bar-cell", span(class = "number", value), bar)
          }
        ),
        perc = colDef(
          header = "Perc",
          defaultSortOrder = "desc",
          format = colFormat(percent = TRUE, digits = 1),
          cell = function(value) {
        # Format as percentages with 1 decimal place
        value <- paste0(format(value * 100, nsmall = 1), "%")
        bar_chart(value, width = value, fill = "#fc5185", background = "#e1e1e1")
      }
        ),
        perc_ads = colDef(
          header = "Perc Ads",
          defaultSortOrder = "desc",
          format = colFormat(percent = TRUE, digits = 1)
        )
      ),
      # compact = TRUE,
      class = "styled-table"
    )
  )
}
  )

# styled_reactable

yes %>% 
  select(-internal_id) %>% 
  reactable()
```


</div>





<script>
document.addEventListener('DOMContentLoaded', function () {
  console.log('DOM fully loaded and parsed');

  // Hide all content initially
  document.querySelectorAll('.region-content').forEach(function(el) {
    el.style.display = 'none';
  });
  document.querySelectorAll('.party-content').forEach(function(el) {
    el.style.display = 'none';
  });
</script>
<style>
body, html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

#map-container {
  width: 100%;
  height: 600px;
  border: 2px solid red;
}

.highcharts-container {
  width: 100% !important;
  height: 100% !important;
}

.highcharts-root {
  width: 100% !important;
  height: 100% !important;
}

.panel-tabset .tab-content {
  border-top: none; /* Adds a subtle top border */
  border-bottom: none; /* Adds a subtle top border */
  border-left: none; /* Adds a subtle top border */
  border-right: none; /* Adds a subtle top border */    
}


/* CSS for the styled reactable */

/* Styles for the table container, title, and subtitle */
.styled-table {
  /* Center the table */
  margin: 0 auto;
  /* Reduce the table width */
  width: 575px;
  font-family: Karla, "Helvetica Neue", Helvetica, Arial, sans-serif;
}

/* CSS for the styled reactable */

/* Styles for the table container, title, and subtitle */
.styled-table {
  /* Center the table */
  margin: 0 auto;
  /* Reduce the table width */
  font-family: Karla, "Helvetica Neue", Helvetica, Arial, sans-serif;
}

.header {
  border-bottom: 2px solid #555;
  font-size: 0.8125rem;
  font-weight: 400;
  text-transform: uppercase;
}

.header:hover {
  background-color: #eee;
}

/* Styles for the bar charts */
.bar-cell {
  display: flex;
  align-items: center;
}

.number {
  font-family: "Fira Mono", Consolas, Monaco, monospace;
  font-size: 0.84375rem;
  white-space: pre;
}

.bar-chart {
  flex-grow: 1;
  margin-left: 0.375rem;
  height: 0.875rem;
}

.bar {
  height: 100%;
  background-color: #3fc1c9;
}

.number-cell {
  text-align: right;
  font-family: monospace;
}

.type-cell {
  text-align: left;
  padding-left: 1rem;
}

.styled-table a {
  color: inherit;
  text-decoration: none;
}

.styled-table a:hover,
.styled-table a:focus {
  text-decoration: underline;
  text-decoration-thickness: max(1px, 0.0625rem);
}


</style>

