---
title: "Uitgave per selectiecriterium"
description-meta: "Hoe jagen politieke partijen op jouw stem, wat willen ze juist niet dat je ziet en hoeveel geld geven ze daaraan uit? In aanloop naar de verkiezingen monitoren we politieke microtargeting."
lang: nl
format:
  html:
    toc: true
    toc-location: right
---


```{r setup, include=FALSE}

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)




# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf, shiny)


source("../utils.R")
source("../party_utils.R")

calc_targeting2 <- possibly(calc_targeting, otherwise = tibble(no_data = T))

```

```{r}


if(Sys.info()[["user"]] == "fabio"){
  col_each30 <- readRDS("col_each30.rds")
} else {
  col_each30 <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1])
    }) %>% 
  filter(target != "Gender: Alles") %>% 
  filter(target != "Onbekend")


saveRDS(col_each30, "col_each30.rds")



  col_each30_excl <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting2(.x, exclude = T) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1]) 
    }) 
  
  saveRDS(col_each30_excl, "col_each30_excl.rds")

  col_each30_incl <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting2(.x, exclude = F) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1]) 
    }) 
  
  saveRDS(col_each30_incl, "col_each30_incl.rds")
  
  
}

```

```{r}
if(Sys.info()[["user"]] == "fabio"){
  col_each7 <- readRDS("col_each7.rds")
} else {
col_each7 <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1])
    }) %>% 
  filter(target != "Gender: Alles") %>% 
  filter(target != "Onbekend")

  col_each7_excl <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting2(.x, exclude = T) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1])
    })
  
  saveRDS(col_each7_excl, "col_each7_excl.rds")
  
  col_each7_incl <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(internal_id) %>%
    map_dfr(~{
        calc_targeting2(.x, exclude = F) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1],
                   internal_id = .x$internal_id[1]) 
    })
  
  saveRDS(col_each7_incl, "col_each7_incl.rds")

saveRDS(col_each7, "col_each7.rds")
}



col_each30 <- col_each30 %>% 
  filter(target != "Gender: Alles") %>% 
  filter(target != "Onbekend")

col_each7 <- col_each7 %>% 
  filter(target != "Gender: Alles") %>% 
  filter(target != "Onbekend")
```

```{r}
plot_geography <- function(x) {
  
  
byparty <- x %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total)) %>%
  ungroup() %>%
  select(party, total_spenderino)
  
  # x <- col_each30
   gg <- x %>%
  filter(target != "countries") %>% 
  group_by(target, party) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  ungroup() %>% 
  left_join(byparty) %>% 
  mutate(perc = spend_per/total_spenderino*100) %>% 
    filter(perc >= 0.5) %>%
    mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  # target == "DEELGEMEENTE" ~ "DEELGEMEENTE",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
      TRUE ~ target
    )) %>%
    filter(target != "Unknown") %>%
    add_count(party, target) %>% 
    arrange(desc(n))

  # the_order <- gg %>%
  #   complete(party, target, fill = list(n = 0)) %>%
  #   mutate(target = fct_reorder(target, n, .desc = FALSE)) %>%
  #   pull(target) %>%
  #   levels()



  charts <- gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
    split(.$party) %>%
    map(~ {
      the_color <-
        color_dat$colors[color_dat$party == .x$party[1]]
      
         the_order <- .x %>%
            filter(party == .x$party[1]) %>% 
           arrange(desc(perc)) %>% 
            mutate(target = fct_reorder(target, perc, .desc = T)) %>%
            pull(target) %>%
            levels()
      # print(the_order)
      daaat <-.x %>% 
        dplyr::mutate(target = as.factor(target)) %>% 
        dplyr::mutate(target = factor(target, levels =  the_order)) %>% 
        arrange(target)
      
      hchart(daaat, type = "bar", hcaes(x = target, y = perc), color = the_color) %>%
            hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
            hc_yAxis(title = list(text = "% Party Budget spent on targeting method"), max = 100, min = 0) %>%
            hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
            hc_add_theme(hc_theme_google()) %>%
           highcharter::hc_tooltip(
              pointFormat = paste0("<b>{point.target}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol,           "{point.spend_perlab} on this method."),
              headerFormat = ""
            ) %>%
            hc_title(text = unique(daaat$party), align = "left", style = list(fontWeight = "bold")) %>%
        hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
    }
    )

  charts
}

```

```{r}

lts <<- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vR0B2SBiIU4UX0XNMGPHY1OLNpoZqxR6_dlF_kxJ0C7KpOKuXcIVgcf6oy8ljxLghXaAX6pPLXCgO-o/pub?output=csv") %>% 
  janitor::clean_names() %>% 
  rename(page_name = candidate) %>% 
  mutate(page_id = str_extract(ad_library_page, "view_all_page_id=.*") %>%
           str_remove_all("view_all_page_id\\=")) %>% 
  separate(page_id, into = c("page_id", "other"), sep = "&") %>% 
  select(-other)

byparty30 <- election_dat30 %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total_spend_formatted)) %>%
  ungroup() %>%
  select(party, total_spenderino)

byparty7 <- election_dat7 %>%
  distinct(internal_id, party, .keep_all = T) %>%
  group_by(party) %>%
  summarize(total_spenderino = sum(total_spend_formatted)) %>%
  ungroup() %>%
  select(party, total_spenderino)
```


Deze grafieken geven op basis van de meest recente data een overzicht van de doelgroepen waar partijen zich in hun advertenties op focussen in de aanloop van de partijen. We focussen ons uitsluitend op Meta-platformen (Facebook en Instagram), aangezien zij politieke adverteerders het meeste keuze geven in het richten van een advertentie op een doelgroep.

Hoeveel geld gaven campagnes uit aan verschillende doelgroepen? De onderstaande grafieken tonen zowel de totale uitgaven als de uitgaven per politieke partij.

De hier getoonde gegevens verwijzen naar de laatste 30 dagen (`r last30days_string`).


> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.

::: {.panel-tabset}

## Algemeen 


::: {.panel-tabset}

### Totaal


```{r, fig.width=8, fig.height=5, dpi=300}

all_spend <- col_each30  %>% 
  distinct(internal_id, .keep_all = T) %>% 
  summarise(total = sum(total),
            total_ads = sum(total_ads))

gg <- col_each30  %>%
  filter(target != "countries") %>% 
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
  # group_by(internal_id, target) %>% 
  # arrange(desc(perc)) %>% 
  # slice(1) %>% 
  # ungroup() %>% 
  group_by(target) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  mutate(perc = spend_per/all_spend$total*100) %>% 
    arrange(desc(perc)) %>% 
  filter(perc >= 0.01)


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget voor targeting (% van totaal)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% van totaal budget besteed: {point.y:.1f}%<br>in totaal ", currency_symbol, "{point.spend_perlab} aan deze methode."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


### Per Partij


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


# debugonce(plot_geography)



# col_each30 %>% 
#   filter(party == "Groen") %>% 
#   arrange(desc(perc)) %>%
#   filter(target != "countries") %>% 
#   group_by(target, party) %>% 
#   summarize(spend_per = sum(spend_per)) %>% 
#   ungroup() %>% 
#   left_join(byparty30) %>% 
#   mutate(perc = spend_per/total_spenderino*100) %>%
#     filter(perc >= 0.5)
#   plot_geography()
#   
# col_each30 %>% 
#   filter(party == "Groen") %>% 
#   arrange(desc(perc)) %>%
#   filter(target != "countries") %>% 
#   filter(target == "DEELGEMEENTE")
# 
# col_each30 %>% 
#   filter(party == "Groen") %>% 
#   arrange(desc(perc)) %>%
#   filter(target != "countries") 
```

:::


## EU

Dit gedeelte toont de lijsttrekkers voor de verkiezingen voor het Europees Parlement voor elke partij.

::: {.panel-tabset}

### Totaal


```{r, fig.width=8, fig.height=5, dpi=300}
col_each30this <- col_each30  %>% 
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id), 
            by = "internal_id") %>% 
  filter(type == "Lijsttrekkers_EU") 

all_spend <- col_each30this %>%  
  distinct(internal_id, .keep_all = T) %>% 
  summarise(total = sum(total),
            total_ads = sum(total_ads)) 

gg <- col_each30this  %>%
  filter(target != "countries") %>% 
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
  # group_by(internal_id, target) %>% 
  # arrange(desc(perc)) %>% 
  # slice(1) %>% 
  # ungroup() %>% 
  group_by(target) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  mutate(perc = spend_per/all_spend$total*100) %>% 
    arrange(desc(perc)) %>% 
  filter(perc >= 0.01)


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget voor targeting (% van totaal)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% van totaal budget besteed: {point.y:.1f}%<br>in totaal ", currency_symbol, "{point.spend_perlab} aan deze methode."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


### Per Partij


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30this)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

:::

## Federaal

Dit gedeelte toont de lijsttrekkers voor de federale verkiezingen voor elke partij.


::: {.panel-tabset}

### Totaal


```{r, fig.width=8, fig.height=5, dpi=300}
col_each30this <- col_each30  %>% 
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id), 
            by = "internal_id") %>% 
  filter(type == "Lijsttrekkers_federal_election") 

all_spend <- col_each30this %>%  
  distinct(internal_id, .keep_all = T) %>% 
  summarise(total = sum(total),
            total_ads = sum(total_ads)) 

gg <- col_each30this  %>%
  filter(target != "countries") %>% 
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
  # group_by(internal_id, target) %>% 
  # arrange(desc(perc)) %>% 
  # slice(1) %>% 
  # ungroup() %>% 
  group_by(target) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  mutate(perc = spend_per/all_spend$total*100) %>% 
    arrange(desc(perc)) %>% 
  filter(perc >= 0.01)


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget voor targeting (% van totaal)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% van totaal budget besteed: {point.y:.1f}%<br>in totaal ", currency_symbol, "{point.spend_perlab} aan deze methode."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


### Per Partij


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30this)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

:::

## Vlaanderen

Dit gedeelte toont de lijsttrekkers voor de verkiezingen in Vlaanderen voor elke partij.


::: {.panel-tabset}

### Totaal


```{r, fig.width=8, fig.height=5, dpi=300}
col_each30this <- col_each30  %>% 
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id), 
            by = "internal_id") %>% 
  filter(type == "Lijsttrekkers_Flemish_election") 

all_spend <- col_each30this %>%  
  distinct(internal_id, .keep_all = T) %>% 
  summarise(total = sum(total),
            total_ads = sum(total_ads)) 

gg <- col_each30this  %>%
  filter(target != "countries") %>% 
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
  # group_by(internal_id, target) %>% 
  # arrange(desc(perc)) %>% 
  # slice(1) %>% 
  # ungroup() %>% 
  group_by(target) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  mutate(perc = spend_per/all_spend$total*100) %>% 
    arrange(desc(perc)) %>% 
  filter(perc >= 0.01)


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget voor targeting (% van totaal)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% van totaal budget besteed: {point.y:.1f}%<br>in totaal ", currency_symbol, "{point.spend_perlab} aan deze methode."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


### Per Partij


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30this)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

:::

## Brussel

Dit gedeelte toont de lijsttrekkers voor de verkiezingen in Brussel voor elke partij.


::: {.panel-tabset}

### Totaal


```{r, fig.width=8, fig.height=5, dpi=300}
col_each30this <- col_each30  %>% 
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id), 
            by = "internal_id") %>% 
  filter(type == "Lijsttrekkers_Brussels_Gewest") 

all_spend <- col_each30this %>%  
  distinct(internal_id, .keep_all = T) %>% 
  summarise(total = sum(total),
            total_ads = sum(total_ads)) 

gg <- col_each30this  %>%
  filter(target != "countries") %>% 
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
  target == "custom_audience" ~ "Doelgroepen",
  target == "countries" ~ "Geheel Land",
  target == "regions" ~ "Regio's",
  target == "lookalike_audience" ~ "Gelijkaardige Doelgroepen",
  target == "interest" ~ "Gedetailleerd",
  target == "age" ~ "Leeftijd",
  target == "zips" ~ "Postcode",
  target == "CITY" ~ "Stad",
  target == "language" ~ "Taal",
  target == "gender" ~ "Geslacht",
  target == "Gender: Men" ~ "Mannen",
  target == "Gender: Women" ~ "Vrouwen",
  target == "COMUNE" ~ "Gemeente",
  target == "electoral_districts" ~ "Kiesdistricten",
  target == "COUNTY" ~ "Provincies",
  str_detect(target, "NEIGHBOR") ~ "Buurt",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
  # group_by(internal_id, target) %>% 
  # arrange(desc(perc)) %>% 
  # slice(1) %>% 
  # ungroup() %>% 
  group_by(target) %>% 
  summarize(spend_per = sum(spend_per)) %>% 
  mutate(perc = spend_per/all_spend$total*100) %>% 
    arrange(desc(perc)) %>% 
  filter(perc >= 0.01)


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget voor targeting (% van totaal)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% van totaal budget besteed: {point.y:.1f}%<br>in totaal ", currency_symbol, "{point.spend_perlab} aan deze methode."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


### Per Partij


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30this)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```


:::

:::
