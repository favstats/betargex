---
title: "Demografie"
description-meta: "Hoe jagen politieke partijen op jouw stem, wat willen ze juist niet dat je ziet en hoeveel geld geven ze daaraan uit? In aanloop naar de Tweede Kamerverkiezingen monitoren we politieke microtargeting."
lang: nl
format:
  html:
    toc: true
    toc-location: right
---

```{r setup, include=FALSE}

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)


# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf, shiny)


source("../utils.R")
source("../party_utils.R")

lts <<- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vR0B2SBiIU4UX0XNMGPHY1OLNpoZqxR6_dlF_kxJ0C7KpOKuXcIVgcf6oy8ljxLghXaAX6pPLXCgO-o/pub?output=csv") %>% 
  janitor::clean_names() %>% 
  rename(page_name = candidate) %>% 
  mutate(page_id = str_extract(ad_library_page, "view_all_page_id=.*") %>%
           str_remove_all("view_all_page_id\\=")) %>% 
  separate(page_id, into = c("page_id", "other"), sep = "&") %>% 
  select(-other)

```

De hier getoonde gegevens verwijzen naar de laatste 30 dagen (`r last30days_string`).

::: panel-tabset

# Algemeen

::: panel-tabset

## Leeftijd


Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende leeftijdsgroepen.



> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.



```{r, fig.width= 10, fig.height=7, dpi = 300}
get_targ_perc <- function(x, var) {

x <<- x
total_sppppeen <- x %>%
  mutate(total_spend = total_spend_formatted) %>%
  distinct(internal_id, .keep_all = T)  %>%
  # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
  mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
  select(internal_id, total_spend) %>%
  arrange(desc(total_spend)) %>%
  summarize(total_budget = sum(total_spend)) %>%
  ungroup()


x %>%
  mutate(total_spend = total_spend_formatted) %>%
  mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
  filter(type == var) %>%
  # filter(total_spend_pct != 0) %>%
  # group_by(internal_id) %>%
  # mutate(n_ages = n()) %>% #count(n_ages, sort = T)
  # ungroup()%>%
  mutate(spend_per = total_spend * total_spend_pct) %>%
  group_by(value) %>%
  summarize(spend_per = sum(spend_per)) %>%
  bind_cols(total_sppppeen) %>%
  mutate(perc = spend_per/total_budget) %>%
            mutate(coalition = x$coalition[1],
                   party = x$party[1],
                   election = x$election[1])

}


age_targeting <- election_dat30 %>%
    group_split(party) %>%
    map_dfr(get_targ_perc, "age") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% 13:17)) %>%
    mutate(age_groups = case_when(
        value %in% 18:24 ~ "18-24",
        value %in% 25:34 ~ "25-34",
        value %in% 35:44 ~ "35-44",
        value %in% 45:54 ~ "45-54",
        value %in% 55:64 ~ "55-64",
        T ~ value
    )) %>%
    group_by(age_groups, party) %>%
    summarize(spend_per = mean(spend_per),
              total_budget = unique(total_budget))  %>%
  mutate(perc = spend_per/total_budget)  %>%
    mutate(age_groups = factor(age_groups,
                               c("18-24",
                                 "25-34",
                                 "35-44",
                                 "45-54",
                                 "55-64", "65+") %>% rev)) %>%
  ungroup()


```

```{r}



charts <- age_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map( ~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x,
           type = "bar",
           hcaes(x = age_groups, y = perc),
           color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%
      hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0(
          "<b>{point.age_groups}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
          currency_symbol,
          "{point.spend_perlab} on this age group"
        ),
        headerFormat = ""
      ) %>%
      hc_title(
        text = unique(.x$party),
        align = "left",
        style = list(fontWeight = "bold")
      ) %>%
      hc_size(height = 300) %>%
      hc_exporting(enabled = TRUE)
  })

# charts

# Usage
# age_targeting(election_dat30)

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```


## Gender 

De onderstaande grafieken laten zien hoe partijen gender als focusgroep gebruiken en welk percentage van het budget daaraan werd uitgegeven.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 8, fig.height=5, dpi = 300}


gender_targeting <- election_dat30 %>%
group_split(party) %>%
map_dfr(get_targ_perc, "gender") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum != 0)

# Determine the maximum value for xlim
max_x <- max(gender_targeting$perc*100)

# Create the charts
charts <- gender_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this gender"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })



```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```


## Taal

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende taalgroepen.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r}

lang_targeting <- election_dat30 %>%
group_split(party) %>%
map_dfr(get_targ_perc, "language") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum >= 0.01)

# Determine the maximum value for xlim
max_x <- max(lang_targeting$perc*100)

# Create the charts
charts <- lang_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this language"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```



## Beroep of Onderwijs(niveau)

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende beroepscategorieën, studierichtingen en onderwijsinstellingen. 

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 11, fig.height=8, dpi = 300}


calc_jobs_perc <- function(x) {

total_sppppeen <- x %>%
# filter(coalition == "Coalizione di centro-destra") %>%
  mutate(total_spend = total_spend_formatted) %>%
  distinct(internal_id, .keep_all = T)  %>%
  # mutate(total_spend = readr::parse_number(total_spend_formatted)) %>%
  mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
  select(internal_id, total_spend) %>%
  arrange(desc(total_spend)) %>%
  summarize(total_budget = sum(total_spend)) %>%
  ungroup()

x %>%
    filter(type == "detailed") %>%
    filter(detailed_type == "DEMOGRAPHICS") %>%
  filter(!is_exclusion) %>%
    # count(value, sort = T) %>%
    # filter(str_detect(value, "Associate degree|Doctorate degree|In college|Master's degree|Some college|Some grad school|High school grad|In high school|Professional degree|Some high school|College grad|In grad school", negate = T)) %>%
    # filter(str_detect(value, "MBO", negate = T)) %>%
  mutate(total_spend = total_spend_formatted) %>%
  mutate(total_spend = ifelse(total_spend == 50, 50, total_spend)) %>%
  # filter(coalition == "Coalizione di centro-destra") %>%
  # filter(total_spend_pct != 0) %>%
  # group_by(internal_id) %>%
  # mutate(n_ages = n()) %>% #count(n_ages, sort = T)
  # ungroup()%>%
  mutate(spend_per = total_spend * total_spend_pct) %>%
  group_by(value) %>%
  summarize(spend_per = sum(spend_per)) %>%
  bind_cols(total_sppppeen) %>%
  mutate(perc = spend_per/total_budget) %>%
            mutate(coalition = x$coalition[1],
                   party = x$party[1],
                   election = x$election[1])
}

job_targeting <- election_dat30 %>%
    group_split(party) %>%
    map_dfr(calc_jobs_perc) %>%
    filter(perc >= 0.1) %>%
    # filter(str_detect(value, relationshipstuff, negate = T)) %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    slice(1:20) %>%
    mutate(value = fct_reorder(value, perc))




# Determine the maximum value for xlim
max_x <- max(job_targeting$perc*100)

# Create the charts
charts <- job_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this job/education (sector)"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })





```

```{r echo=FALSE, results='asis'}


doplot <- map_dbl(charts,~{
  # length(flatten(.x)$x$hc_opts$series)
  length(.x$x$hc_opts$series)
}) %>% all(. == 0)

if(!doplot){



# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

}  else {
  shiny::HTML("No data (yet).")
}







```

:::


# EU

Dit gedeelte toont de lijsttrekkers voor de verkiezingen voor het Europees Parlement voor elke partij.


::: panel-tabset

## Leeftijd


Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende leeftijdsgroepen.



> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.



```{r, fig.width= 10, fig.height=7, dpi = 300}


age_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_EU") %>% 
    group_split(party) %>%
    map_dfr(get_targ_perc, "age") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% 13:17)) %>%
    mutate(age_groups = case_when(
        value %in% 18:24 ~ "18-24",
        value %in% 25:34 ~ "25-34",
        value %in% 35:44 ~ "35-44",
        value %in% 45:54 ~ "45-54",
        value %in% 55:64 ~ "55-64",
        T ~ value
    )) %>%
    group_by(age_groups, party) %>%
    summarize(spend_per = mean(spend_per),
              total_budget = unique(total_budget))  %>%
  mutate(perc = spend_per/total_budget)  %>%
    mutate(age_groups = factor(age_groups,
                               c("18-24",
                                 "25-34",
                                 "35-44",
                                 "45-54",
                                 "55-64", "65+") %>% rev)) %>%
  ungroup()


```

```{r}



charts <- age_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map( ~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x,
           type = "bar",
           hcaes(x = age_groups, y = perc),
           color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%
      hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0(
          "<b>{point.age_groups}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
          currency_symbol,
          "{point.spend_perlab} on this age group"
        ),
        headerFormat = ""
      ) %>%
      hc_title(
        text = unique(.x$party),
        align = "left",
        style = list(fontWeight = "bold")
      ) %>%
      hc_size(height = 300) %>%
      hc_exporting(enabled = TRUE)
  })

# charts

# Usage
# age_targeting(election_dat30)

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

## Gender 

De onderstaande grafieken laten zien hoe partijen gender als focusgroep gebruiken en welk percentage van het budget daaraan werd uitgegeven.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 8, fig.height=5, dpi = 300}


gender_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_EU") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "gender") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum != 0)

# Determine the maximum value for xlim
max_x <- max(gender_targeting$perc*100)

# Create the charts
charts <- gender_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this gender"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })



```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```


## Taal

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende taalgroepen.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r}

lang_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_EU") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "language") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum >= 0.01)

# Determine the maximum value for xlim
max_x <- max(lang_targeting$perc*100)

# Create the charts
charts <- lang_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this language"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```



## Beroep of Onderwijs(niveau)

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende beroepscategorieën, studierichtingen en onderwijsinstellingen. 

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 11, fig.height=8, dpi = 300}



job_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_EU") %>% 
    group_split(party) %>%
    map_dfr(calc_jobs_perc) %>%
    filter(perc >= 0.1) %>%
    # filter(str_detect(value, relationshipstuff, negate = T)) %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    slice(1:20) %>%
    mutate(value = fct_reorder(value, perc))




# Determine the maximum value for xlim
max_x <- max(job_targeting$perc*100)

# Create the charts
charts <- job_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this job/education (sector)"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })





```

```{r echo=FALSE, results='asis'}


doplot <- map_dbl(charts,~{
  # length(flatten(.x)$x$hc_opts$series)
  length(.x$x$hc_opts$series)
}) %>% all(. == 0)

if(!doplot){



# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

}  else {
  shiny::HTML("No data (yet).")
}







```


:::

# Federaal

Dit gedeelte toont de lijsttrekkers voor de federale verkiezingen voor elke partij.


::: panel-tabset

## Leeftijd


Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende leeftijdsgroepen.



> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.



```{r, fig.width= 10, fig.height=7, dpi = 300}


age_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_federal_election") %>% 
    group_split(party) %>%
    map_dfr(get_targ_perc, "age") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% 13:17)) %>%
    mutate(age_groups = case_when(
        value %in% 18:24 ~ "18-24",
        value %in% 25:34 ~ "25-34",
        value %in% 35:44 ~ "35-44",
        value %in% 45:54 ~ "45-54",
        value %in% 55:64 ~ "55-64",
        T ~ value
    )) %>%
    group_by(age_groups, party) %>%
    summarize(spend_per = mean(spend_per),
              total_budget = unique(total_budget))  %>%
  mutate(perc = spend_per/total_budget)  %>%
    mutate(age_groups = factor(age_groups,
                               c("18-24",
                                 "25-34",
                                 "35-44",
                                 "45-54",
                                 "55-64", "65+") %>% rev)) %>%
  ungroup()


```

```{r}



charts <- age_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map( ~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x,
           type = "bar",
           hcaes(x = age_groups, y = perc),
           color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%
      hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0(
          "<b>{point.age_groups}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
          currency_symbol,
          "{point.spend_perlab} on this age group"
        ),
        headerFormat = ""
      ) %>%
      hc_title(
        text = unique(.x$party),
        align = "left",
        style = list(fontWeight = "bold")
      ) %>%
      hc_size(height = 300) %>%
      hc_exporting(enabled = TRUE)
  })

# charts

# Usage
# age_targeting(election_dat30)

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

## Gender 

De onderstaande grafieken laten zien hoe partijen gender als focusgroep gebruiken en welk percentage van het budget daaraan werd uitgegeven.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 8, fig.height=5, dpi = 300}


gender_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_federal_election") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "gender") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum != 0)

# Determine the maximum value for xlim
max_x <- max(gender_targeting$perc*100)

# Create the charts
charts <- gender_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this gender"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })



```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```


## Taal

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende taalgroepen.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r}

lang_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_federal_election") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "language") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum >= 0.01)

# Determine the maximum value for xlim
max_x <- max(lang_targeting$perc*100)

# Create the charts
charts <- lang_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this language"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```



## Beroep of Onderwijs(niveau)

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende beroepscategorieën, studierichtingen en onderwijsinstellingen. 

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 11, fig.height=8, dpi = 300}



job_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_federal_election") %>% 
    group_split(party) %>%
    map_dfr(calc_jobs_perc) %>%
    filter(perc >= 0.1) %>%
    # filter(str_detect(value, relationshipstuff, negate = T)) %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    slice(1:20) %>%
    mutate(value = fct_reorder(value, perc))




# Determine the maximum value for xlim
max_x <- max(job_targeting$perc*100)

# Create the charts
charts <- job_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this job/education (sector)"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })





```

```{r echo=FALSE, results='asis'}


doplot <- map_dbl(charts,~{
  # length(flatten(.x)$x$hc_opts$series)
  length(.x$x$hc_opts$series)
}) %>% all(. == 0)

if(!doplot){



# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

}  else {
  shiny::HTML("No data (yet).")
}







```

:::

# Vlaanderen

Dit gedeelte toont de lijsttrekkers voor de verkiezingen in Vlaanderen voor elke partij.


::: panel-tabset

## Leeftijd


Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende leeftijdsgroepen.



> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.



```{r, fig.width= 10, fig.height=7, dpi = 300}


age_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Flemish_election") %>% 
    group_split(party) %>%
    map_dfr(get_targ_perc, "age") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% 13:17)) %>%
    mutate(age_groups = case_when(
        value %in% 18:24 ~ "18-24",
        value %in% 25:34 ~ "25-34",
        value %in% 35:44 ~ "35-44",
        value %in% 45:54 ~ "45-54",
        value %in% 55:64 ~ "55-64",
        T ~ value
    )) %>%
    group_by(age_groups, party) %>%
    summarize(spend_per = mean(spend_per),
              total_budget = unique(total_budget))  %>%
  mutate(perc = spend_per/total_budget)  %>%
    mutate(age_groups = factor(age_groups,
                               c("18-24",
                                 "25-34",
                                 "35-44",
                                 "45-54",
                                 "55-64", "65+") %>% rev)) %>%
  ungroup()


```

```{r}



charts <- age_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map( ~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x,
           type = "bar",
           hcaes(x = age_groups, y = perc),
           color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%
      hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0(
          "<b>{point.age_groups}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
          currency_symbol,
          "{point.spend_perlab} on this age group"
        ),
        headerFormat = ""
      ) %>%
      hc_title(
        text = unique(.x$party),
        align = "left",
        style = list(fontWeight = "bold")
      ) %>%
      hc_size(height = 300) %>%
      hc_exporting(enabled = TRUE)
  })

# charts

# Usage
# age_targeting(election_dat30)

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

## Gender 

De onderstaande grafieken laten zien hoe partijen gender als focusgroep gebruiken en welk percentage van het budget daaraan werd uitgegeven.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 8, fig.height=5, dpi = 300}


gender_targeting <- election_dat30 %>%
    left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Flemish_election") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "gender") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum != 0)

# Determine the maximum value for xlim
max_x <- max(gender_targeting$perc*100)

# Create the charts
charts <- gender_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this gender"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })



```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```


## Taal

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende taalgroepen.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r}

lang_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Flemish_election") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "language") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum >= 0.01)

# Determine the maximum value for xlim
max_x <- max(lang_targeting$perc*100)

# Create the charts
charts <- lang_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this language"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```



## Beroep of Onderwijs(niveau)

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende beroepscategorieën, studierichtingen en onderwijsinstellingen. 

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 11, fig.height=8, dpi = 300}



job_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Flemish_election") %>% 
    group_split(party) %>%
    map_dfr(calc_jobs_perc) %>%
    filter(perc >= 0.1) %>%
    # filter(str_detect(value, relationshipstuff, negate = T)) %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    slice(1:20) %>%
    mutate(value = fct_reorder(value, perc))




# Determine the maximum value for xlim
max_x <- max(job_targeting$perc*100)

# Create the charts
charts <- job_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this job/education (sector)"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })





```

```{r echo=FALSE, results='asis'}


doplot <- map_dbl(charts,~{
  # length(flatten(.x)$x$hc_opts$series)
  length(.x$x$hc_opts$series)
}) %>% all(. == 0)

if(!doplot){



# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

}  else {
  shiny::HTML("No data (yet).")
}







```



:::

# Brussel

Dit gedeelte toont de lijsttrekkers voor de verkiezingen in Brussel voor elke partij.


::: panel-tabset

## Leeftijd


Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende leeftijdsgroepen.



> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.



```{r, fig.width= 10, fig.height=7, dpi = 300}


age_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Brussels_Gewest") %>% 
    group_split(party) %>%
    map_dfr(get_targ_perc, "age") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% 13:17)) %>%
    mutate(age_groups = case_when(
        value %in% 18:24 ~ "18-24",
        value %in% 25:34 ~ "25-34",
        value %in% 35:44 ~ "35-44",
        value %in% 45:54 ~ "45-54",
        value %in% 55:64 ~ "55-64",
        T ~ value
    )) %>%
    group_by(age_groups, party) %>%
    summarize(spend_per = mean(spend_per),
              total_budget = unique(total_budget))  %>%
  mutate(perc = spend_per/total_budget)  %>%
    mutate(age_groups = factor(age_groups,
                               c("18-24",
                                 "25-34",
                                 "35-44",
                                 "45-54",
                                 "55-64", "65+") %>% rev)) %>%
  ungroup()


```

```{r}



charts <- age_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map( ~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x,
           type = "bar",
           hcaes(x = age_groups, y = perc),
           color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"), max = 100, min = 0) %>%
      hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0(
          "<b>{point.age_groups}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ",
          currency_symbol,
          "{point.spend_perlab} on this age group"
        ),
        headerFormat = ""
      ) %>%
      hc_title(
        text = unique(.x$party),
        align = "left",
        style = list(fontWeight = "bold")
      ) %>%
      hc_size(height = 300) %>%
      hc_exporting(enabled = TRUE)
  })

# charts

# Usage
# age_targeting(election_dat30)

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

## Gender 

De onderstaande grafieken laten zien hoe partijen gender als focusgroep gebruiken en welk percentage van het budget daaraan werd uitgegeven.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 8, fig.height=5, dpi = 300}


gender_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Brussels_Gewest") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "gender") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum != 0)

# Determine the maximum value for xlim
max_x <- max(gender_targeting$perc*100)

# Create the charts
charts <- gender_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this gender"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })



```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```


## Taal

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende taalgroepen.

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r}

lang_targeting <- election_dat30 %>%
        left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Brussels_Gewest") %>% 
group_split(party) %>%
map_dfr(get_targ_perc, "language") %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    filter(!(value %in% "Alles")) %>%
    group_by(party) %>%
    mutate(percsum = sum(perc)) %>%
    ungroup() %>%
    filter(percsum >= 0.01)

# Determine the maximum value for xlim
max_x <- max(lang_targeting$perc*100)

# Create the charts
charts <- lang_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this language"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })

```

```{r echo=FALSE, results='asis'}

# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

if(length(columns)!=0){

  # If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})



# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

} else {
  shiny::HTML("No data (yet).")
}




```



## Beroep of Onderwijs(niveau)

Onderstaande grafieken tonen hoeveel procent van hun totale budget politieke partijen uitgeven aan verschillende beroepscategorieën, studierichtingen en onderwijsinstellingen. 

> Let op: Verschillende selectiecriteria kunnen overlappen, dus het totaal kan meer dan 100% bedragen.


```{r, fig.width= 11, fig.height=8, dpi = 300}



job_targeting <- election_dat30 %>%
      left_join(lts %>% select(-party, -page_name) %>% 
              rename(internal_id = page_id,
                     elex_type = type), 
            by = "internal_id") %>% 
  filter(elex_type == "Lijsttrekkers_Brussels_Gewest") %>% 
    group_split(party) %>%
    map_dfr(calc_jobs_perc) %>%
    filter(perc >= 0.1) %>%
    # filter(str_detect(value, relationshipstuff, negate = T)) %>%
     # mutate(coalition = fct_relevel(coalition, c("Coalizione di centro-sinistra",
     #                              "Terzo Polo",
     #                              "Coalizione di centro-destra"))) %>%
    group_by(party) %>%
    arrange(desc(perc)) %>%
    slice(1:20) %>%
    mutate(value = fct_reorder(value, perc))




# Determine the maximum value for xlim
max_x <- max(job_targeting$perc*100)

# Create the charts
charts <- job_targeting %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  mutate(perc = perc * 100) %>%
  split(.$party) %>%
  map(~ {
    the_color <- color_dat$colors[color_dat$party == .x$party[1]]
    hchart(.x, type = "bar", hcaes(x = value, y = perc), color = the_color) %>%
      hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
      hc_yAxis(title = list(text = "% party budget spent on targeting method"),
        max = max_x) %>%   # Set the maximum x-axis value) %>%
      hc_xAxis(
        title = "",
        labels = list(style = list(fontSize = "10px"))
      ) %>%
      hc_add_theme(hc_theme_google()) %>%
      highcharter::hc_tooltip(
        pointFormat = paste0("<b>{point.value}</b><br>% of total budget spent: {point.y:.1f}%<br>a total of ", currency_symbol, "{point.spend_perlab} on this job/education (sector)"),
        headerFormat = ""
      ) %>%
      hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
      hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
  })





```

```{r echo=FALSE, results='asis'}


doplot <- map_dbl(charts,~{
  # length(flatten(.x)$x$hc_opts$series)
  length(.x$x$hc_opts$series)
}) %>% all(. == 0)

if(!doplot){



# Map each plot to a column
columns <- map(charts, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))

}  else {
  shiny::HTML("No data (yet).")
}







```


:::


:::
